package Reflect;

/**
 * 关于JDK中自带的类加载器:
 *  1. 什么是类加载器?
 *      专门负责加载类的命令/工具
 *  2. JDK中自带了三个类加载器
 *      启动类加载器
 *      扩展类加载器
 *      应用类加载器
 *  3. 假设有这样的一段代码:
 *      String s = "abc";
 *
 *      代码在开始执行前,会将所需要的类全部加载到JVM中,通过类加载器加载,看到以上代码,
 *      会找String.class文件,找到就加载,那么是怎么进行加载的呢?
 *          首先通过启动类加载器加载
 *              注意:启动类加载器专门加载:jre中的rt.jar包下的东西,
 *                  这里面都是JDK中最核心的类库
 *
 *          如果通过启动类加载器加载不到的时候,会通过扩展类加载器加载
 *              注意: 扩展类加载器专门加载jre.lib.ext下的jar包
 *
 *          如果扩展类加载器没有加载到,纳闷会通过应用类加载器加载.
 *              注意:应用类加载器专门加载classpath中的jar包,(class文件
 *
 *          java中为了保证类加载的安全,使用了双亲委派机制.优先从启动类加载器加载,这个北城为"父"
 *          "父"无法加载到哦,再从扩展类加载器中加载.称为母,如果这两个都没有,才会考虑从应用类加载器中加载,值到加载位置
 */
public class ClassLoaderTest01 {
}
